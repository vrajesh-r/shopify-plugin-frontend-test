"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodeOrAncestorsInputPrivacyMode = exports.getNodeInputPrivacyMode = exports.nodeOrAncestorsShouldBeHidden = exports.nodeShouldBeHidden = void 0;
var constants_1 = require("../../constants");
// PRIVACY_INPUT_TYPES_TO_IGNORE defines the input types whose input
// events we want to ignore by default, as they often contain PII.
// TODO: We might want to differentiate types to fully ignore vs types
// to obfuscate.
var PRIVACY_INPUT_TYPES_TO_IGNORE = ['email', 'password', 'tel'];
// Returns true if the given DOM node should be hidden. Ancestors
// are not checked.
function nodeShouldBeHidden(node) {
    return (isElement(node) &&
        (node.getAttribute(constants_1.PRIVACY_ATTR_NAME) === constants_1.PRIVACY_ATTR_VALUE_HIDDEN ||
            node.classList.contains(constants_1.PRIVACY_CLASS_HIDDEN)));
}
exports.nodeShouldBeHidden = nodeShouldBeHidden;
// Returns true if the given DOM node should be hidden, recursively
// checking its ancestors.
function nodeOrAncestorsShouldBeHidden(node) {
    if (!node) {
        return false;
    }
    if (nodeShouldBeHidden(node)) {
        return true;
    }
    return nodeOrAncestorsShouldBeHidden(node.parentNode);
}
exports.nodeOrAncestorsShouldBeHidden = nodeOrAncestorsShouldBeHidden;
/**
 * Returns the given node input privacy mode. The ancestor input privacy mode is required to make
 * sure we respect the privacy mode priorities.
 */
function getNodeInputPrivacyMode(node, ancestorInputPrivacyMode) {
    if (!isElement(node)) {
        return 1 /* NONE */;
    }
    var attribute = node.getAttribute(constants_1.PRIVACY_ATTR_NAME);
    if (ancestorInputPrivacyMode === 2 /* IGNORED */ ||
        attribute === constants_1.PRIVACY_ATTR_VALUE_INPUT_IGNORED ||
        node.classList.contains(constants_1.PRIVACY_CLASS_INPUT_IGNORED) ||
        (isInputElement(node) && PRIVACY_INPUT_TYPES_TO_IGNORE.includes(node.type))) {
        return 2 /* IGNORED */;
    }
    if (ancestorInputPrivacyMode === 3 /* MASKED */ ||
        attribute === constants_1.PRIVACY_ATTR_VALUE_INPUT_MASKED ||
        node.classList.contains(constants_1.PRIVACY_CLASS_INPUT_MASKED)) {
        return 3 /* MASKED */;
    }
    return 1 /* NONE */;
}
exports.getNodeInputPrivacyMode = getNodeInputPrivacyMode;
/**
 * Returns the given node input privacy mode. This function is costly because it checks all of the
 * node ancestors.
 */
function getNodeOrAncestorsInputPrivacyMode(node) {
    // We basically iterate ancestors from top (document) to bottom (node). It is way easier to do
    // recursively.
    var ancestorInputPrivacyMode = node.parentNode
        ? getNodeOrAncestorsInputPrivacyMode(node.parentNode)
        : 1 /* NONE */;
    return getNodeInputPrivacyMode(node, ancestorInputPrivacyMode);
}
exports.getNodeOrAncestorsInputPrivacyMode = getNodeOrAncestorsInputPrivacyMode;
function isElement(node) {
    return node.nodeType === node.ELEMENT_NODE;
}
function isInputElement(elem) {
    return elem.tagName === 'INPUT';
}
//# sourceMappingURL=privacy.js.map