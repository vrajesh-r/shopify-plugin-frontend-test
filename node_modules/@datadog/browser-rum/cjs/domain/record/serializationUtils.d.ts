import { InputPrivacyMode } from '../../constants';
import { SerializedNodeWithId } from './types';
export interface NodeWithSerializedNode extends Node {
    __sn: SerializedNodeWithId;
}
export declare function hasSerializedNode(node: Node): node is NodeWithSerializedNode;
export declare function nodeAndAncestorsHaveSerializedNode(node: Node): node is NodeWithSerializedNode;
export declare function getSerializedNodeId(node: NodeWithSerializedNode): number;
export declare function getSerializedNodeId(node: Node): number | undefined;
export declare function setSerializedNode(node: Node, serializeNode: SerializedNodeWithId): void;
export declare function transformAttribute(doc: Document, name: string, value: string): string;
export declare function makeStylesheetUrlsAbsolute(cssText: string, baseUrl: string): string;
export declare function makeSrcsetUrlsAbsolute(attributeValue: string, baseUrl: string): string;
export declare function makeUrlAbsolute(url: string, baseUrl: string): string;
/**
 * Get the element "value" to be serialized as an attribute or an input update record. It respects
 * the input privacy mode of the element. An 'ancestorInputPrivacyMode' can be provided (if known)
 * to avoid iterating over the element ancestors when looking for the input privacy mode.
 */
export declare function getElementInputValue(element: Element, ancestorInputPrivacyMode?: InputPrivacyMode): string | undefined;
export declare function maskValue(value: string): string;
