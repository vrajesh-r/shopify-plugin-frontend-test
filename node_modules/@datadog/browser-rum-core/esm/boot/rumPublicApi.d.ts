import { Context, InitConfiguration, Configuration, InternalMonitoring, Omit } from '@datadog/browser-core';
import { LifeCycle } from '../domain/lifeCycle';
import { ParentContexts } from '../domain/parentContexts';
import { RumSession } from '../domain/rumSession';
import { RumEventDomainContext } from '../domainContext.types';
import { CommonContext, User } from '../rawRumEvent.types';
import { RumEvent } from '../rumEvent.types';
import { startRum } from './startRum';
declare const droppedConfigurationOptions: ("publicApiKey" | "datacenter")[];
declare type DroppedConfigurationOptions = typeof droppedConfigurationOptions[number];
export interface RumInitConfiguration extends Omit<InitConfiguration, DroppedConfigurationOptions> {
    applicationId: string;
    beforeSend?: (event: RumEvent, context: RumEventDomainContext) => void | boolean;
}
export declare type RumPublicApi = ReturnType<typeof makeRumPublicApi>;
export declare type StartRum<C extends RumInitConfiguration = RumInitConfiguration> = (initConfiguration: C, configuration: Configuration, internalMonitoring: InternalMonitoring, getCommonContext: () => CommonContext, initialViewName?: string) => StartRumResult;
declare type StartRumResult = ReturnType<typeof startRum>;
export interface RecorderApi {
    start: () => void;
    stop: () => void;
    onRumStart: (lifeCycle: LifeCycle, initConfiguration: RumInitConfiguration, configuration: Configuration, session: RumSession, parentContexts: ParentContexts) => void;
    isRecording: () => boolean;
}
export declare function makeRumPublicApi<C extends RumInitConfiguration>(startRumImpl: StartRum<C>, recorderApi: RecorderApi): {
    init: (initConfiguration: C) => void;
    addRumGlobalContext: (key: string, value: any) => void;
    removeRumGlobalContext: (key: string) => void;
    getRumGlobalContext: () => Context;
    setRumGlobalContext: (newContext: object) => void;
    getInternalContext: (startTime?: number | undefined) => import("../rawRumEvent.types").InternalContext | undefined;
    getInitConfiguration: () => InitConfiguration | undefined;
    addAction: (name: string, context?: object | undefined) => void;
    addError: (error: unknown, context?: object | undefined) => void;
    addTiming: (name: string) => void;
    setUser: (newUser: User) => void;
    removeUser: () => void;
    startView: (name?: string | undefined) => void;
    startSessionReplayRecording: () => void;
    stopSessionReplayRecording: () => void;
} & {
    onReady(callback: () => void): void;
};
export {};
